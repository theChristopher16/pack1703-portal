#!/bin/bash

# GCP Infrastructure Validation Tests
# This script validates that all GCP resources have been deployed successfully

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counters
PASSED=0
FAILED=0
SKIPPED=0

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

pass() {
    echo -e "${GREEN}‚úÖ PASS${NC} $1"
    PASSED=$((PASSED + 1))
}

fail() {
    echo -e "${RED}‚ùå FAIL${NC} $1"
    FAILED=$((FAILED + 1))
}

skip() {
    echo -e "${YELLOW}‚è≠Ô∏è  SKIP${NC} $1"
    SKIPPED=$((SKIPPED + 1))
}

# Header
echo "=========================================="
echo "GCP Infrastructure Validation Tests"
echo "=========================================="
echo ""

# Check if gcloud is authenticated
log "Checking gcloud authentication..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    fail "gcloud not authenticated. Please run 'gcloud auth login'"
    exit 1
fi

# Get current project
PROJECT_ID=$(gcloud config get-value project 2>/dev/null || echo "")
if [ -z "$PROJECT_ID" ]; then
    fail "No GCP project set. Please run 'gcloud config set project <PROJECT_ID>'"
    exit 1
fi

log "Using GCP project: $PROJECT_ID"
echo ""

# Test 1: Project Status
log "Test 1: GCP Project Status"
if gcloud projects describe "$PROJECT_ID" >/dev/null 2>&1; then
    pass "Project exists and is accessible"
else
    fail "Project does not exist or is not accessible"
fi

# Test 2: Billing Status
log "Test 2: Billing Status"
BILLING_ACCOUNT=$(gcloud billing projects describe "$PROJECT_ID" --format="value(billingAccountName)" 2>/dev/null || echo "")
if [ -n "$BILLING_ACCOUNT" ]; then
    pass "Billing is enabled: $BILLING_ACCOUNT"
else
    fail "Billing is not enabled"
fi

# Test 3: Required APIs
log "Test 3: Required APIs"
REQUIRED_APIS=(
    "firebase.googleapis.com"
    "firestore.googleapis.com"
    "cloudfunctions.googleapis.com"
    "storage.googleapis.com"
    "cloudscheduler.googleapis.com"
    "pubsub.googleapis.com"
    "monitoring.googleapis.com"
    "secretmanager.googleapis.com"
    "identitytoolkit.googleapis.com"
    "appcheck.googleapis.com"
)

for api in "${REQUIRED_APIS[@]}"; do
    if gcloud services list --enabled --filter="name:$api" --format="value(name)" | grep -q "$api"; then
        pass "API enabled: $api"
    else
        fail "API not enabled: $api"
    fi
done

# Test 4: Firebase Project
log "Test 4: Firebase Project"
if firebase projects:list | grep -q "$PROJECT_ID"; then
    pass "Firebase project exists"
else
    fail "Firebase project does not exist"
fi

# Test 5: Firebase Web Apps
log "Test 5: Firebase Web Apps"
WEB_APPS=$(firebase apps:list 2>/dev/null | grep -q "web")
if [ -n "$WEB_APPS" ]; then
    pass "Firebase web apps found: $(echo "$WEB_APPS" | wc -l | tr -d ' ')"
else
    fail "No Firebase web apps found"
fi

# Test 6: Firebase Hosting Sites
log "Test 6: Firebase Hosting Sites"
HOSTING_SITES=$(firebase hosting:sites:list 2>/dev/null | grep -q "web.app")
if [ -n "$HOSTING_SITES" ]; then
    pass "Firebase hosting sites found: $(echo "$HOSTING_SITES" | wc -l | tr -d ' ')"
else
    fail "No Firebase hosting sites found"
fi

# Test 7: Firestore Database
log "Test 7: Firestore Database"
if gcloud firestore databases list --project="$PROJECT_ID" --format="value(name)" | grep -q "(default)"; then
    pass "Firestore database exists"
else
    fail "Firestore database does not exist"
fi

# Test 8: Firestore Indexes
log "Test 8: Firestore Indexes"
INDEXES=$(gcloud firestore indexes composite list --project="$PROJECT_ID" --format="value(name)" 2>/dev/null || echo "")
if [ -n "$INDEXES" ]; then
    pass "Firestore indexes found: $(echo "$INDEXES" | wc -l | tr -d ' ')"
else
    fail "No Firestore indexes found"
fi

# Test 9: Cloud Storage Buckets
log "Test 9: Cloud Storage Buckets"
BUCKETS=$(gsutil ls -p "$PROJECT_ID" 2>/dev/null || echo "")
if [ -n "$BUCKETS" ]; then
    pass "Cloud Storage buckets found: $(echo "$BUCKETS" | wc -l | tr -d ' ')"
else
    fail "No Cloud Storage buckets found"
fi

# Test 10: Cloud Functions Service Account
log "Test 10: Cloud Functions Service Account"
SERVICE_ACCOUNTS=$(gcloud iam service-accounts list --project="$PROJECT_ID" --filter="email:firebase-admin" --format="value(email)" 2>/dev/null | grep -q "firebase-admin" || echo "")
if [ -n "$SERVICE_ACCOUNTS" ]; then
    pass "Firebase admin service account exists"
else
    fail "Firebase admin service account does not exist"
fi

# Test 11: Cloud Functions IAM Roles
log "Test 11: Cloud Functions IAM Roles"
if gcloud projects get-iam-policy "$PROJECT_ID" --flatten="bindings[].members" --filter="bindings[].members:firebase-admin" --format="value(bindings.role)" | grep -q "roles/firebase.admin"; then
    pass "Firebase admin role assigned"
else
    fail "Firebase admin role not assigned"
fi

# Test 12: Monitoring Notification Channels
log "Test 12: Monitoring Notification Channels"
NOTIFICATION_CHANNELS=$(gcloud monitoring channels list --project="$PROJECT_ID" --format="value(displayName)" 2>/dev/null || echo "")
if [ -n "$NOTIFICATION_CHANNELS" ]; then
    pass "Monitoring notification channels found: $(echo "$NOTIFICATION_CHANNELS" | wc -l | tr -d ' ')"
else
    fail "No monitoring notification channels found"
fi

# Test 13: Monitoring Alert Policies
log "Test 13: Monitoring Alert Policies"
ALERT_POLICIES=$(gcloud monitoring policies list --project="$PROJECT_ID" --format="value(displayName)" 2>/dev/null || echo "")
if [ -n "$ALERT_POLICIES" ]; then
    pass "Monitoring alert policies found: $(echo "$ALERT_POLICIES" | wc -l | tr -d ' ')"
else
    fail "No monitoring alert policies found"
fi

# Test 14: Billing Budgets
log "Test 14: Billing Budgets"
BUDGETS=$(gcloud billing budgets list --billing-account="$BILLING_ACCOUNT" --format="value(name)" 2>/dev/null | head -5 || echo "")
if [ -n "$BUDGETS" ]; then
    pass "Billing budgets found: $(echo "$BUDGETS" | wc -l | tr -d ' ')"
else
    fail "No billing budgets found"
fi

# Test 15: Secret Manager
log "Test 15: Secret Manager"
SECRETS=$(gcloud secrets list --project="$PROJECT_ID" --format="value(name)" 2>/dev/null || echo "")
if [ -n "$SECRETS" ]; then
    pass "Secret Manager secrets found: $(echo "$SECRETS" | wc -l | tr -d ' ')"
else
    fail "No Secret Manager secrets found"
fi

# Summary
echo ""
echo "=========================================="
echo "Test Summary"
echo "=========================================="
echo -e "${GREEN}Passed: $PASSED${NC}"
echo -e "${RED}Failed: $FAILED${NC}"
echo -e "${YELLOW}Skipped: $SKIPPED${NC}"
echo ""

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ All infrastructure tests passed!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Some infrastructure tests failed. Please review the errors above.${NC}"
    exit 1
fi
