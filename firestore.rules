rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ============================================================================
    // PRODUCTION RULES - Secure access control
    // ============================================================================
    
    // User management - allow users to read their own data, admins to read all
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'admin']
      );
      allow write: if request.auth != null && (
        request.auth.uid == userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'root'
      );
    }
    
    // Invite management - allow admins to create/read invites, users to read their own invites
    match /invites/{inviteId} {
      allow read: if request.auth != null && (
        // Users can read invites for their email
        resource.data.email == request.auth.token.email ||
        // Admins can read all invites
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'admin']
      );
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'admin'];
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'admin'];
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'admin'];
    }
    
    // Allow public read access to events and announcements
    match /events/{eventId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true 
        || resource.data.createdBy == 'ai_solyn'; // Allow AI to create events
    }
    
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true
        || resource.data.createdBy == 'ai_solyn'; // Allow AI to create announcements
    }
    
    // Allow public read access to locations (no authentication required)
    match /locations/{locationId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true
        || resource.data.createdBy == 'ai_solyn'; // Allow AI to create locations
    }
    
    // Allow public read access to seasons
    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow public read access to packing lists and resources
    match /lists/{listId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow public read access to volunteer needs
    match /volunteer-needs/{needId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow public read access to volunteer signups (but only show user's own)
    match /volunteer-signups/{signupId} {
      allow read: if true; // Will filter by user in the app
      allow create: if true; // Allow anyone to sign up
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow public read access to feedback submissions (but only show user's own)
    match /feedback/{submissionId} {
      allow read: if true; // Will filter by user in the app
      allow create: if true; // Allow anyone to submit feedback
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow public read access to RSVP submissions (but only show user's own)
    match /rsvps/{rsvpId} {
      allow read: if true; // Will filter by user in the app
      allow create: if true; // Allow anyone to RSVP
      allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Chat system collections - allow public read/write for accountless chat
    match /chat-users/{userId} {
      allow read, write: if true; // Allow public access for accountless chat
    }
    
    match /chat-messages/{messageId} {
      allow read, write: if true; // Allow public access for accountless chat
    }
    
    match /chat-channels/{channelId} {
      allow read, write: if true; // Allow public access for accountless chat
    }
    
    // Messages collection (legacy) - allow public read/write
    match /messages/{messageId} {
      allow read, write: if true; // Allow public access for backward compatibility
    }
    
    // Configuration collection - allow public read access
    match /configurations/{configId} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null && request.auth.token.admin == true; // Admin write only
    }
    
    // Resources collection
    match /resources/{resourceId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true
        || resource.data.createdBy == 'ai_solyn'; // Allow AI to create resources
    }

    // Analytics collection - allow public write for tracking, admin read for dashboard
    match /analytics/{analyticsId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if true; // Allow public write for analytics tracking
    }
    }
    
    // Fundraising campaigns
    match /fundraising-campaigns/{campaignId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Financial transactions
    match /financial-transactions/{transactionId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Email monitoring and AI audit logs
    match /email-logs/{logId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if true; // Allow AI to create logs
    }
    
    match /audit-logs/{logId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if true; // Allow AI to create audit logs
    }
    
    // Weather cache for location weather data
    match /weather-cache/{cacheId} {
      allow read: if true;
      allow write: if true; // Allow cloud functions to update cache
    }
    
    // Moderation digests
    match /moderation-digests/{digestId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if true; // Allow cloud functions to create digests
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Fallback: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
