rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.get('role', '') == 'admin' ||
              request.auth.token.get('role', '') == 'super_admin' ||
              request.auth.token.get('role', '') == 'den_leader' ||
              request.auth.token.get('isAdmin', false) == true);
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp > timestamp.value(2024, 1, 1) &&
             timestamp < timestamp.value(2030, 12, 31);
    }
    
    function isValidString(str, maxLength) {
      return str is string && 
             str.size() > 0 && 
             str.size() <= maxLength &&
             !str.matches('.*<[^>]*>.*'); // No HTML tags
    }
    
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    // Seasons - Public read, admin write
    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidTimestamp(resource.data.startDate) &&
                      isValidTimestamp(resource.data.endDate) &&
                      resource.data.startDate < resource.data.endDate;
    }

    // Events - Public read (non-private), admin write
    match /events/{eventId} {
      allow read: if resource.data.visibility == 'public' || 
                     resource.data.visibility == 'link-only' ||
                     isAdmin();
      
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.description, 2000) &&
                      isValidTimestamp(resource.data.startDate) &&
                      isValidTimestamp(resource.data.endDate) &&
                      resource.data.startDate < resource.data.endDate &&
                      resource.data.visibility in ['public', 'link-only', 'private'] &&
                      resource.data.category in ['meeting', 'camping', 'service', 'social', 'training'] &&
                      (resource.data.maxParticipants == null || resource.data.maxParticipants > 0);
    }

    // Locations - Public read, admin write
    match /locations/{locationId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 200) &&
                      isValidString(resource.data.address, 300) &&
                      resource.data.coordinates.latitude >= -90 &&
                      resource.data.coordinates.latitude <= 90 &&
                      resource.data.coordinates.longitude >= -180 &&
                      resource.data.coordinates.longitude <= 180;
    }

    // Announcements - Public read, admin write
    match /announcements/{announcementId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.content, 5000) &&
                      isValidTimestamp(resource.data.createdAt) &&
                      resource.data.pinned is bool;
    }

    // Lists (packing lists, etc.) - Public read, admin write
    match /lists/{listId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      resource.data.items is list &&
                      resource.data.items.size() <= 100;
    }

    // RSVPs - Authenticated users can create/read their own, admins can read all
    match /rsvps/{rsvpId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.userEmail == request.auth.token.email || 
                      isAdmin());
      allow create: if isAuthenticated() && // Authentication required for RSVP
                       resource.data.userId == request.auth.uid &&
                       isValidString(resource.data.familyName, 100) &&
                       isValidEmail(resource.data.email) &&
                       isValidString(resource.data.eventId, 50) &&
                       resource.data.attendees is list &&
                       resource.data.attendees.size() > 0 &&
                       resource.data.attendees.size() <= 20 &&
                       isValidTimestamp(resource.data.submittedAt) &&
                       resource.data.ipHash is string &&
                       resource.data.ipHash.size() == 64; // SHA-256 hash
      allow update: if false; // RSVPs are immutable after creation
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Volunteers - Write-only for public, read for admin
    match /volunteers/{volunteerId} {
      allow read: if isAdmin();
      allow create: if !isAuthenticated() && // No auth required for volunteering
                       isValidString(resource.data.name, 100) &&
                       isValidEmail(resource.data.email) &&
                       isValidString(resource.data.phone, 20) &&
                       isValidString(resource.data.eventId, 50) &&
                       isValidString(resource.data.role, 100) &&
                       isValidTimestamp(resource.data.submittedAt) &&
                       resource.data.ipHash is string &&
                       resource.data.ipHash.size() == 64;
      allow update: if false; // Volunteer signups are immutable
    }

    // Feedback - Write-only for public, read for admin
    match /feedback/{feedbackId} {
      allow read: if isAdmin();
      allow create: if !isAuthenticated() && // No auth required for feedback
                       isValidString(resource.data.message, 2000) &&
                       resource.data.type in ['general', 'bug', 'feature', 'complaint'] &&
                       isValidTimestamp(resource.data.submittedAt) &&
                       resource.data.ipHash is string &&
                       resource.data.ipHash.size() == 64;
      allow update: if false; // Feedback is immutable
    }

    // Admin audit logs - Admin read-only
    match /admin/audit/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Audit logs are created by Cloud Functions only
    }

    // Admin user management - Admin only
    match /admin/users/{userId} {
      allow read, write: if isAdmin();
    }

    // Volunteer needs - Public read, admin write
    match /volunteer-needs/{needId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Volunteer signups - Users can read/update their own, admins can read all
    match /volunteer-signups/{signupId} {
      allow read: if isAuthenticated() && 
                     (resource.data.volunteerUserId == request.auth.uid || 
                      resource.data.volunteerEmail == request.auth.token.email || 
                      isAdmin());
      allow create: if isAuthenticated() &&
                       resource.data.volunteerUserId == request.auth.uid &&
                       isValidString(resource.data.volunteerName, 100) &&
                       isValidEmail(resource.data.volunteerEmail) &&
                       isValidString(resource.data.needId, 50) &&
                       isValidString(resource.data.eventId, 50) &&
                       isValidString(resource.data.role, 100) &&
                       resource.data.count is int &&
                       resource.data.count > 0 &&
                       resource.data.count <= 10 &&
                       resource.data.status in ['pending', 'confirmed', 'cancelled'] &&
                       isValidTimestamp(resource.data.createdAt);
      allow update: if isAuthenticated() && 
                       (resource.data.volunteerUserId == request.auth.uid || isAdmin()) &&
                       resource.data.status in ['pending', 'confirmed', 'cancelled'];
      allow delete: if isAuthenticated() && 
                       (resource.data.volunteerUserId == request.auth.uid || isAdmin());
    }

    // System configuration - Admin only
    match /system/{configId} {
      allow read: if isAdmin();
      allow write: if isAdmin() && 
                      request.auth.token.get('role', '') == 'super-admin';
    }


    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
