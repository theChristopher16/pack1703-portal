rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.get('role', '') in ['admin', 'root', 'leader'] ||
              exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'root', 'leader']);
    }
    
    function isRoot() {
      return isAuthenticated() && 
             (request.auth.token.get('role', '') == 'root' ||
              exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'root');
    }
    
    function isValidTimestamp(ts) {
      return ts is timestamp && 
             ts > timestamp.date(2024, 1, 1) &&
             ts < timestamp.date(2030, 12, 31);
    }
    
    function isValidString(str, maxLength) {
      return str is string && 
             str.size() > 0 && 
             str.size() <= maxLength &&
             !str.matches('.*<[^>]*>.*'); // No HTML tags
    }
    
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    // ============================================================================
    // USER DATA SECURITY - Users can only access their own data
    // ============================================================================
    
    // Users collection - SECURE RULES (root account now exists)
  match /users/{userId} {
    // Users can read their own data
    allow read: if request.auth != null && request.auth.uid == userId;
    
    // Admins can read all users (for analytics and aggregation queries)
    allow read: if isAdmin();
    
    // Users can update their own profile (except role and permissions)
    allow update: if request.auth != null && 
                     request.auth.uid == userId &&
                     !('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
                     !('permissions' in request.resource.data.diff(resource.data).affectedKeys()) &&
                     !('isActive' in request.resource.data.diff(resource.data).affectedKeys());
    
    // Only root users can create new users
    allow create: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'root';
    
    // Only root users can delete users
    allow delete: if request.auth != null && 
                    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'root';
  }
  
    // Allow aggregation queries on users collection for admins
  match /users {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on announcements collection for admins
  match /announcements {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on locations collection for admins
  match /locations {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on categories collection for admins
  match /categories {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on seasons collection for admins
  match /seasons {
    allow read: if isAdmin();
  }
    
    // Analytics - users can only access their own analytics data
    match /analytics/{analyticsId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Usage tracking - users can only access their own usage data
    match /usageTracking/{usageId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // User usage stats - users can only access their own stats
    match /userUsageStats/{userId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == userId;
    }
    
    // Component analytics - authenticated users can read, admins can write
    match /componentAnalytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // RSVPs - users can only access their own RSVPs
    match /rsvps/{rsvpId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Feedback - users can only access their own feedback (no admin access)
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Volunteer signups - users can only access their own signups
    match /volunteer-signups/{signupId} {
      allow read, write: if isAuthenticated() && 
        resource.data.volunteerUserId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.volunteerUserId == request.auth.uid;
    }
    
    // User-pinned announcements - users can only access their own pins
    match /user-pinned-announcements/{pinId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // System logs - users can only access their own logs
    match /system-logs/{logId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // PUBLIC DATA - Readable by all authenticated users
    // ============================================================================
    
    // Events - public read for non-private events, admin write
    match /events/{eventId} {
      allow read: if resource.data.visibility == 'public' || 
                     (isAuthenticated() && resource.data.visibility == 'link-only') ||
                     isAdmin();
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.description, 2000) &&
                      isValidTimestamp(resource.data.start) &&
                      isValidTimestamp(resource.data.end) &&
                      resource.data.start < resource.data.end;
    }
    
    // Allow aggregation queries on events collection for admins
    match /events {
      allow read: if isAdmin();
    }
    
    // Announcements - public read, admin write
    match /announcements/{announcementId} {
      allow read: if true; // Public announcements
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.content, 5000) &&
                      isValidTimestamp(resource.data.createdAt);
    }
    
    // Locations - public read, admin write
    match /locations/{locationId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidString(resource.data.address, 500);
    }
    
    // Categories - public read, admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100);
    }
    
    // Seasons - public read, admin write
    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidTimestamp(resource.data.startDate) &&
                      isValidTimestamp(resource.data.endDate) &&
                      resource.data.startDate < resource.data.endDate;
    }

    // ============================================================================
    // CHAT SYSTEM - Users can access channels they're part of
    // ============================================================================
    
    // Chat channels - authenticated users can read, admins can write
    match /chat-channels/{channelId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Chat messages - authenticated users can read/write
    match /chat-messages/{messageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
    }
    
    // Chat users - users can read their own status, admins can read all
    match /chat-users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Allow aggregation queries on chat-users collection for admins
    match /chat-users {
      allow read: if isAdmin();
    }

    // Pack lists - admin read/write, authenticated users read
    match /packLists/{listId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidString(resource.data.description, 500);
    }

    // Resources - public read, admin write
    match /resources/{resourceId} {
      allow read: if true; // Public resources
      allow write: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.description, 1000);
    }
    
    // Allow aggregation queries on resources collection for admins
    match /resources {
      allow read: if isAdmin();
    }

    // ============================================================================
    
    // Admin audit logs - admin read-only
    match /admin/audit/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Audit logs are created by Cloud Functions only
    }
    
    // Allow aggregation queries on admin audit collection for admins
    match /admin/audit {
      allow read: if isAdmin();
    }
    
    // Admin actions - admin read-only
    match /adminActions/{actionId} {
      allow read: if isAdmin();
      allow write: if false; // Admin actions are created by Cloud Functions only
    }
    
    // Allow aggregation queries on admin actions collection for admins
    match /adminActions {
      allow read: if isAdmin();
    }
    
    // AI usage logs - admin read-only
    match /aiUsage/{usageId} {
      allow read: if isAdmin();
      allow write: if false; // AI usage logs are created by Cloud Functions only
    }
    
    // Allow aggregation queries on AI usage collection for admins
    match /aiUsage {
      allow read: if isAdmin();
    }
    
    // AI interactions - admin read-only
    match /ai-interactions/{interactionId} {
      allow read: if isAdmin();
      allow write: if false; // AI interactions are created by Cloud Functions only
    }
    
    // AI confirmations - admin read-only
    match /ai-confirmations/{confirmationId} {
      allow read: if isAdmin();
      allow write: if false; // AI confirmations are created by Cloud Functions only
    }
    
    // Email monitor logs - admin read-only
    match /email-monitor-logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Email monitor logs are created by Cloud Functions only
    }
    
    // Usage tracking - authenticated users can read/write their own data
    match /usageTracking/{usageId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all usage data
    }
    
    // User usage stats - authenticated users can read/write their own data
    match /userUsageStats/{userId} {
      allow read, write: if isAuthenticated() && 
                          resource.id == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all user stats
    }
    
    // Chat users - authenticated users can read/write their own data
    match /chat-users/{userId} {
      allow read, write: if isAuthenticated() && 
                          resource.id == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all chat users
    }
    
    // Analytics - authenticated users can read/write their own data, admins can read all
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       request.resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Performance metrics - authenticated users can read/write their own data, admins can read all
    match /performance_metrics/{metricId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       request.resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Admin user management - admin only
    match /admin/users/{userId} {
      allow read, write: if isAdmin();
    }
    
    // System configuration - admin only
    match /system/{configId} {
      allow read: if isAdmin();
      allow write: if isRoot();
    }
    
    // Application configurations - admin read/write, authenticated users read
    match /configurations/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Volunteers collection - admin only
    match /volunteers/{volunteerId} {
      allow read, write: if isAdmin();
    }
    
    // Reminders - admin only
    match /reminders/{reminderId} {
      allow read, write: if isAdmin();
    }

    // ============================================================================
    // MULTI-TENANT DATA
    // ============================================================================
    
    // Cross-organization users - users can only access their own records
    match /crossOrganizationUsers/{recordId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Organizations - authenticated users can read, admins can write
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ============================================================================
    // DENY ALL OTHER ACCESS
    // ============================================================================
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}