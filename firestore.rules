rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Updated to include all authenticated user roles
      return isAuthenticated() && 
             request.auth.token.get('role', '') in ['admin', 'super_admin', 'den_leader', 'parent'];
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.get('role', '') == 'super_admin';
    }
    
    // TEMPORARY: Allow all authenticated users to read public data when App Check blocks access
    // This is a temporary workaround for App Check enforcement issues
    function isAuthenticatedUser() {
      return isAuthenticated();
    }
    
    function isValidTimestamp(ts) {
      return ts is timestamp && 
             ts > timestamp.date(2024, 1, 1) &&
             ts < timestamp.date(2030, 12, 31);
    }
    
    function isValidString(str, maxLength) {
      return str is string && 
             str.size() > 0 && 
             str.size() <= maxLength &&
             !str.matches('.*<[^>]*>.*'); // No HTML tags
    }
    
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function getUserDenData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.dens;
    }

    // ===== Multi-tenant helpers =====
    function isPlatformSuper() {
      return request.auth != null && request.auth.token.platform != null &&
             request.auth.token.platform.hasAny(['SUPER_ADMIN']);
    }
    function isRootRole() {
      return request.auth != null && request.auth.token.get('role', '') in ['root', 'super_admin', 'super-admin'];
    }
    function isSuperViaUserDoc() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['root', 'super_admin', 'super-admin'];
    }
    function isSuper() { return isPlatformSuper() || isRootRole() || isSuperViaUserDoc(); }

    // ============================================================================
    // USER DATA SECURITY - Users can only access their own data
    // ============================================================================
    
    // Users collection - SECURE RULES (root account now exists)
    match /users/{userId} {
    // Users can read their own data
    allow read: if request.auth != null && request.auth.uid == userId;
    
    // Admins can read all users (for analytics and aggregation queries)
    allow read: if isAdmin();
    
    // Users can update their own profile (except role and permissions)
    // Root users can also update role, permissions, and isActive status
    allow update: if request.auth != null && 
                     request.auth.uid == userId;
    
    // Users can create their own user document (for new signups)
    // Super admin users can also create user documents for others
    allow create: if request.auth != null && 
                     (request.auth.uid == userId || 
                      request.auth.token.get('role', '') == 'super_admin');
    
    // Only super admin users can delete users
    allow delete: if request.auth != null && 
                    request.auth.token.get('role', '') == 'super_admin';
  }
  
    // Allow aggregation queries on users collection for admins
    // Also allow limited queries for new user creation (checking if first user)
    match /users {
      allow read: if isAdmin();
      // Allow users to check if collection is empty (for first user detection)
      allow read: if isAuthenticated() && 
                     request.query.limit <= 1;
    }
  
  // Allow aggregation queries on announcements collection for admins
  match /announcements {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on locations collection for admins
  match /locations {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on categories collection for admins
  match /categories {
    allow read: if isAdmin();
  }
  
  // Allow aggregation queries on seasons collection for admins
  match /seasons {
    allow read: if isAdmin();
  }
    
    // Analytics - users can only access their own analytics data
    match /analytics/{analyticsId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Usage tracking - users can only access their own usage data
    match /usageTracking/{usageId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // User usage stats - users can only access their own stats
    match /userUsageStats/{userId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == userId;
    }
    
    // Component analytics - authenticated users can read, admins can write
    match /componentAnalytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // RSVPs - users can only access their own RSVPs
    match /rsvps/{rsvpId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Feedback - users can access their own feedback, den leaders+ can read all and respond
    match /feedback/{feedbackId} {
      // Users can read their own feedback
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      // Den leaders and up can read all feedback
      allow read: if isAuthenticated() && 
        request.auth.token.get('role', '') in ['volunteer', 'admin', 'root'];
      // Users can create their own feedback
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      // Den leaders and up can update feedback (add responses)
      allow update: if isAuthenticated() && 
        request.auth.token.get('role', '') in ['volunteer', 'admin', 'root'];
    }
    
    // Volunteer needs - authenticated users can read, admins can write
    match /volunteer-needs/{needId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Allow aggregation queries on volunteer-needs collection for authenticated users
    match /volunteer-needs {
      allow read: if isAuthenticated();
    }
    
    // Volunteer signups - users can access their own signups, admins can read all
    match /volunteer-signups/{signupId} {
      allow read: if isAuthenticated() && 
        (resource.data.volunteerUserId == request.auth.uid || isAdmin());
      allow write: if isAuthenticated() && 
        resource.data.volunteerUserId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.volunteerUserId == request.auth.uid;
    }
    
    // Allow aggregation queries on volunteer-signups collection for admins
    match /volunteer-signups {
      allow read: if isAdmin();
    }
    
    // User-pinned announcements - users can only access their own pins
    match /user-pinned-announcements/{pinId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // System logs - users can only access their own logs
    match /system-logs/{logId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // PUBLIC DATA - Readable by all authenticated users
    // ============================================================================
    
    // Events - public read for non-private events, authenticated users can write
    match /events/{eventId} {
      allow read: if resource.data.visibility == 'public' || 
                     (isAuthenticated() && resource.data.visibility == 'link-only') ||
                     isAdmin();
      allow write: if isAuthenticated() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.description, 2000) &&
                      isValidTimestamp(resource.data.startDate) &&
                      isValidTimestamp(resource.data.endDate) &&
                      resource.data.startDate < resource.data.endDate;
    }
    
    // Allow aggregation queries on events collection for authenticated users
    match /events {
      allow read: if isAuthenticated();
    }
    
    // Announcements - den-based access for read, admin write
    match /announcements/{announcementId} {
      allow read: if isAdmin() || // Admins can read all
                     (!resource.data.targetDens || // No targeting = public
                      resource.data.targetDens.size() == 0) ||
                     (isAuthenticated() && 
                      resource.data.targetDens != null &&
                      resource.data.targetDens.size() > 0 &&
                      getUserDenData().hasAny(resource.data.targetDens));
      allow create: if isAdmin() &&
                      isValidString(request.resource.data.title, 200) &&
                      isValidString(request.resource.data.content, 5000);
      allow update: if isAdmin() &&
                      isValidString(resource.data.title, 200) &&
                      isValidString(resource.data.content, 5000);
      allow delete: if isAdmin();
    }
    
    // Locations - public read, admin write
    match /locations/{locationId} {
      allow read: if true;
      allow create: if isAdmin() &&
                      isValidString(request.resource.data.name, 100) &&
                      isValidString(request.resource.data.address, 500);
      allow update: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidString(resource.data.address, 500);
      allow delete: if isAdmin();
    }
    
    // Categories - public read, admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100);
    }
    
    // Seasons - public read, admin write
    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidTimestamp(resource.data.startDate) &&
                      isValidTimestamp(resource.data.endDate) &&
                      resource.data.startDate < resource.data.endDate;
    }

    // ============================================================================
    // CHAT SYSTEM - Users can access channels they're part of
    // ============================================================================
    
    // Chat channels - authenticated users can read, admins can write
    match /chat-channels/{channelId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Chat messages - all authenticated users can read/write
    match /chat-messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Chat users - users can read their own status, admins can read all
    match /chat-users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Allow aggregation queries on chat-users collection for admins
    match /chat-users {
      allow read: if isAdmin();
    }

    // Pack lists - admin read/write, authenticated users read
    match /packLists/{listId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() &&
                      isValidString(resource.data.name, 100) &&
                      isValidString(resource.data.description, 500);
    }

    // Resources - public read, den leaders+ can write
    match /resources/{resourceId} {
      allow read: if true; // Public resources
      allow create: if isAuthenticated() && 
                       request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root'] &&
                       isValidString(request.resource.data.title, 200) &&
                       isValidString(request.resource.data.description, 1000);
      allow update: if isAuthenticated() && 
                       request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root'] &&
                       isValidString(resource.data.title, 200) &&
                       isValidString(resource.data.description, 1000);
      // Allow authenticated users to update download count and like count
      allow update: if isAuthenticated() && 
                       request.resource.data.downloadCount is number &&
                       request.resource.data.likeCount is number &&
                       request.resource.data.title == resource.data.title &&
                       request.resource.data.description == resource.data.description;
      allow delete: if isAuthenticated() && 
                       request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root'];
    }
    
    // Allow aggregation queries on resources collection for admins
    match /resources {
      allow read: if isAdmin();
    }
    
    // User resource likes - users can manage their own likes
    match /user-resource-likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // Allow aggregation queries on user-resource-likes for like status checks
    match /user-resource-likes {
      allow read: if isAuthenticated();
    }
    
    // Resource submissions - parents can submit, admins can review
    match /resource-submissions/{submissionId} {
      // Users can read their own submissions, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.submittedBy == request.auth.uid || 
                      request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root']);
      // Any authenticated user can create submissions
      allow create: if isAuthenticated() &&
                       request.resource.data.submittedBy == request.auth.uid &&
                       isValidString(request.resource.data.resourceTitle, 200) &&
                       isValidString(request.resource.data.submittedByName, 100) &&
                       isValidString(request.resource.data.fileName, 200);
      // Only admins can update (for reviews)
      allow update: if isAuthenticated() && 
                       request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root'];
      // Users can delete their own submissions, admins can delete any
      allow delete: if isAuthenticated() && 
                       (resource.data.submittedBy == request.auth.uid || 
                        request.auth.token.get('role', '') in ['volunteer', 'admin', 'super-admin', 'root']);
    }
    
    // Allow aggregation queries on resource-submissions
    match /resource-submissions {
      allow read: if isAuthenticated();
    }

    // ============================================================================
    
    // Admin audit logs - admin read-only
    match /admin/audit/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Audit logs are created by Cloud Functions only
    }
    
    // Allow aggregation queries on admin audit collection for admins
    match /admin/audit {
      allow read: if isAdmin();
    }
    
    // Admin actions - admins can write for logging
    match /adminActions/{actionId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Allow aggregation queries on admin actions collection for admins
    match /adminActions {
      allow read: if isAdmin();
    }
    
    // Audit logs - admins can write for logging
    match /auditLogs/{auditId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Allow aggregation queries on audit logs collection for admins
    match /auditLogs {
      allow read: if isAdmin();
    }
    
    // AI usage logs - admin read-only
    match /aiUsage/{usageId} {
      allow read: if isAdmin();
      allow write: if false; // AI usage logs are created by Cloud Functions only
    }
    
    // Allow aggregation queries on AI usage collection for admins
    match /aiUsage {
      allow read: if isAdmin();
    }
    
    
    // System metrics - admin read-only
    match /systemMetrics/{metricId} {
      allow read: if isAdmin();
      allow write: if false; // System metrics are created by Cloud Functions only
    }
    
    // Allow aggregation queries on system metrics collection for admins
    match /systemMetrics {
      allow read: if isAdmin();
    }
    
    // Performance metrics - admin read-only
    match /performanceMetrics/{metricId} {
      allow read: if isAdmin();
      allow write: if false; // Performance metrics are created by Cloud Functions only
    }
    
    // Allow aggregation queries on performance metrics collection for admins
    match /performanceMetrics {
      allow read: if isAdmin();
    }
    
    // Allow aggregation queries on system-logs collection for authenticated users
    match /system-logs {
      allow read: if isAuthenticated();
    }
    
    // Allow aggregation queries on chat-messages collection for authenticated users
    match /chat-messages {
      allow read: if isAuthenticated();
    }
    
    // Allow aggregation queries on chat-channels collection for authenticated users
    match /chat-channels {
      allow read: if isAuthenticated();
    }
    
    // Allow aggregation queries on rsvps collection for admins
    match /rsvps {
      allow read: if isAdmin();
    }
    
    // Allow aggregation queries on feedback collection for admins
    match /feedback {
      allow read: if isAdmin();
    }
    
    // Allow aggregation queries on analytics collection for authenticated users
    match /analytics {
      allow read: if isAuthenticated();
    }
    
    // AI interactions - admin read-only
    match /ai-interactions/{interactionId} {
      allow read: if isAdmin();
      allow write: if false; // AI interactions are created by Cloud Functions only
    }
    
    // AI confirmations - admin read-only
    match /ai-confirmations/{confirmationId} {
      allow read: if isAdmin();
      allow write: if false; // AI confirmations are created by Cloud Functions only
    }
    
    // Email monitor logs - admin read-only
    match /email-monitor-logs/{logId} {
      allow read: if isAdmin();
      allow write: if isAuthenticated(); // Allow authenticated users to log email activity
    }
    
    // Usage tracking - authenticated users can read/write their own data
    match /usageTracking/{usageId} {
      allow read, write: if isAuthenticated() && 
                          resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all usage data
    }
    
    // User usage stats - authenticated users can read/write their own data
    match /userUsageStats/{userId} {
      allow read, write: if isAuthenticated() && 
                          resource.id == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all user stats
    }
    
    // Chat users - authenticated users can read/write their own data
    match /chat-users/{userId} {
      allow read, write: if isAuthenticated() && 
                          resource.id == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all chat users
    }
    
    // Analytics - authenticated users can read/write their own data, admins can read all
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       request.resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Performance metrics - authenticated users can read/write their own data, admins can read all
    match /performance_metrics/{metricId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       request.resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Admin user management - admin only
    match /admin/users/{userId} {
      allow read, write: if isAdmin();
    }
    
    // System configuration - admin only
    match /system/{configId} {
      allow read: if isAdmin();
      allow write: if isRoot();
    }
    
    // Application configurations - admin read/write, authenticated users read
    match /configurations/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Volunteers collection - admin only
    match /volunteers/{volunteerId} {
      allow read, write: if isAdmin();
    }
    
    // Reminders - admin only
    match /reminders/{reminderId} {
      allow read, write: if isAdmin();
    }

    // ============================================================================
    // COST MANAGEMENT COLLECTIONS
    // ============================================================================
    
    // Cost tracking - admin only (using kebab-case to match service)
    match /cost-tracking/{trackingId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on cost tracking collection for admins
    match /cost-tracking {
      allow read: if isAdmin();
    }
    
    // Cost alerts - admin only (using kebab-case to match service)
    match /cost-alerts/{alertId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on cost alerts collection for admins
    match /cost-alerts {
      allow read: if isAdmin();
    }
    

    // ============================================================================
    // FINANCIAL MANAGEMENT COLLECTIONS - Admin only
    // ============================================================================
    
    // Financial transactions - admin only
    match /financial-transactions/{transactionId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on financial transactions for admins
    match /financial-transactions {
      allow read: if isAdmin();
    }
    
    // Financial accounts - admin only
    match /financial-accounts/{accountId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on financial accounts for admins
    match /financial-accounts {
      allow read: if isAdmin();
    }
    
    // Budget categories - admin only
    match /budget-categories/{categoryId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on budget categories for admins
    match /budget-categories {
      allow read: if isAdmin();
    }
    
    // Financial reports - admin only
    match /financial-reports/{reportId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on financial reports for admins
    match /financial-reports {
      allow read: if isAdmin();
    }
    
    // Financial goals - admin only
    match /financial-goals/{goalId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on financial goals for admins
    match /financial-goals {
      allow read: if isAdmin();
    }
    
    // Recurring transactions - admin only
    match /recurring-transactions/{recurringId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on recurring transactions for admins
    match /recurring-transactions {
      allow read: if isAdmin();
    }
    
    // Financial settings - admin only
    match /financial-settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on financial settings for admins
    match /financial-settings {
      allow read: if isAdmin();
    }


    // ============================================================================
    // MULTI-TENANT DATA
    // ============================================================================
    
    // Cross-organization users - users can only access their own records
    match /crossOrganizationUsers/{recordId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Organizations - authenticated users can read, admins can write
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Secure tokens store (server-only)
    match /integrations_secure/{docId} {
      allow read, write: if false;
    }

    // ============================================================================
    // ACCOUNT REQUESTS - Admin only
    // ============================================================================
    
    // Account requests - admins can read and write
    match /accountRequests/{requestId} {
      allow read, write: if isAdmin();
    }
    
    // Allow aggregation queries on account requests collection for admins
    match /accountRequests {
      allow read: if isAdmin();
    }

    // ============================================================================
    // TEST COLLECTIONS (for monitoring and testing)
    // ============================================================================
    
    // Test connection collection - allow all access for testing
    match /_test_connection/{document} {
      allow read, write: if true;
    }
    
    // ============================================================================
    // SECURITY COLLECTIONS - SOC Console Data
    // ============================================================================
    
    // Security alerts - admin read-only
    match /securityAlerts/{alertId} {
      allow read: if isAdmin();
      allow write: if false; // Security alerts are created by Cloud Functions only
    }
    
    // Allow aggregation queries on security alerts for admins
    match /securityAlerts {
      allow read: if isAdmin();
    }
    
    // Threat intelligence - admin read-only
    match /threatIntelligence/{threatId} {
      allow read: if isAdmin();
      allow write: if false; // Threat intelligence is created by Cloud Functions only
    }
    
    // Allow aggregation queries on threat intelligence for admins
    match /threatIntelligence {
      allow read: if isAdmin();
    }
    
    // ============================================================================
    // BME680 SENSOR DATA & ECOLOGY
    // ============================================================================
    
    // BME680 environmental sensor readings
    match /bme680_readings/{readingId} {
      // Anyone can read (for Ecology Dashboard)
      allow read: if true;
      // Allow writes from anyone (ESP32 devices use API key, not auth)
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    
    // General sensor readings
    match /sensor_readings/{readingId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    
    // Camera images from ESP32-CAM
    match /camera_images/{imageId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAdmin();
    }
    
    // ============================================================================
    // DENY ALL OTHER ACCESS
    // ============================================================================
    
    // Note: Removed overly broad catch-all rule that was blocking all access
    // Specific rules above handle all necessary access patterns
  }
}